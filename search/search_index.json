{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-fletx","title":"\u2728 Welcome to FletX","text":"<p>FletX is a lightweight, modular, and reactive architectural framework built on top of Flet, designed to help you build scalable Python UI applications with clean code, structured layers, and modern development patterns.</p>"},{"location":"#what-is-fletx","title":"What is FletX?","text":"<p>Inspired by frameworks like GetX in the Flutter ecosystem, FletX introduces powerful architectural patterns to Flet:</p> <ul> <li>\u2705 Reactive state management</li> <li>\u2705 Modular routing system with dynamic parameters and guards</li> <li>\u2705 Controllers and services to separate logic from UI</li> <li>\u2705 Global and local dependency injection</li> <li>\u2705 Lifecycle hooks for pages and the app</li> <li>\u2705 Unified configuration with fluent API</li> <li>\u2705 Built-in support for asynchronous programming</li> </ul>"},{"location":"#philosophy","title":"\ud83e\udde0 Philosophy","text":"<p>FletX is built on 3 core principles:</p> <ol> <li>Simplicity \u2014 Focus on code clarity and maintainability  </li> <li>Modularity \u2014 Encourage component-based structure and reusable logic  </li> <li>Flexibility \u2014 Allow full control over your app flow, while staying non-intrusive  </li> </ol> <p>FletX is not a UI library. It doesn\u2019t reinvent Flet\u2019s widgets \u2014 it empowers you to use them better by providing a powerful and extensible application layer.</p>"},{"location":"#quick-example","title":"\u26a1 Quick Example","text":"<p>import flet as ft</p> <p>from fletx.app import FletXApp from fletx.core import (     FletXPage, FletXController, RxInt, RxStr ) from fletx.navigation import router_config from fletx.decorators import obx</p> <p>class CounterController(FletXController):</p> <pre><code>def __init__(self):\n    count = RxInt(0)  # Reactive state\n    super().__init__()\n</code></pre> <p>class CounterPage(FletXPage):     ctrl = CounterController()</p> <pre><code>@obx\ndef counter_text(self):\n    return ft.Text(\n        value=f'Count: {self.ctrl.count}',\n        size=50,\n        weight=\"bold\",\n        color='red' if not self.ctrl.count.value % 2 == 0 else 'white'\n    )\n\ndef build(self):\n    return ft.Column(\n        controls=[\n            self.counter_text(),\n            ft.ElevatedButton(\n                \"Increment\",\n                on_click=lambda e: self.ctrl.count.increment()\n            )\n        ]\n    )\n</code></pre> <p>def main():     router_config.add_route(         path='/',         component=CounterPage     )     app = FletXApp(         title=\"My Counter\",         initial_route=\"/\",         debug=True     ).with_window_size(400, 600).with_theme(         ft.Theme(color_scheme_seed=ft.Colors.BLUE)     )</p> <pre><code>app.run()\n</code></pre> <p>if name == \"main\":     main() ```</p>"},{"location":"#explore-fletx","title":"\ud83d\ude80 Explore FletX","text":"<ul> <li> <p> Get Started</p> <p>Set up FletX and build your first UI in minutes.</p> <p>\u2192 Installation Guide</p> </li> <li> <p> API Reference</p> <p>Complete reference for all available methods and configurations.</p> <p>\u2192 API Documentation</p> </li> <li> <p> Guides</p> <p>Learn routing, state, and architecture with hands-on guides.</p> <p>\u2192 Routing Guide | \u2192 State Management</p> </li> <li> <p> Contribute</p> <p>Help improve FletX with your feedback and code.</p> <p>\u2192 Contribution Guide</p> </li> </ul>"},{"location":"#additional-links","title":"\ud83d\udccc Additional Links","text":"<ul> <li>GitHub Repository</li> <li>PyPI Package</li> <li>Join the Community on Discord</li> <li>License</li> </ul> <p>Made with \u2764\ufe0f by AllDotPy</p>"},{"location":"CODE_OF_CONDUCT/","title":"\ud83d\udd4a FletX Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"\ud83c\udf1f Our Pledge","text":"<p>We pledge to foster an open, inclusive, and respectful environment for all contributors, regardless of: </p> <ul> <li>Background or experience level  </li> <li>Gender identity or expression  </li> <li>Sexual orientation  </li> <li>Disability  </li> <li>Personal appearance  </li> <li>Race, ethnicity, or religion  </li> <li>Technology preferences  </li> </ul>"},{"location":"CODE_OF_CONDUCT/#unacceptable-behavior","title":"\ud83d\udeab Unacceptable Behavior","text":"<p>Examples include but are not limited to:</p> <ul> <li>Harassment or derogatory comments  </li> <li>Trolling or personal/political attacks  </li> <li>Publishing others' private information without consent  </li> <li>Other conduct that could reasonably be considered inappropriate  </li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"\ud83d\udee0 Enforcement Responsibilities","text":"<p>Project maintainers will:</p> <ul> <li>Remove/edit inappropriate content  </li> <li>Warn or ban offenders temporarily/permanently  </li> <li>Apply consequences fairly and consistently  </li> </ul>"},{"location":"CODE_OF_CONDUCT/#reporting-guidelines","title":"\u2696\ufe0f Reporting Guidelines","text":"<p>Report violations to [project email/contact] with:</p> <ol> <li>Where/when the incident occurred  </li> <li>Description of the behavior  </li> <li>Context (if available)  </li> <li>Your contact information (optional)  </li> </ol> <p>All reports will be reviewed and investigated promptly.  </p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"\ud83d\udd04 Attribution","text":"<p>This Code of Conduct is adapted from:</p> <ul> <li>Contributor Covenant 2.1 </li> <li>Django Code of Conduct </li> </ul>"},{"location":"contributing/","title":"Contributing to FletX","text":"<p>Thank you for your interest in FletX! \ud83c\udf89 This comprehensive guide outlines how to contribute effectively.</p>"},{"location":"contributing/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>Getting Started</li> <li>Project Structure</li> <li>Development Workflow</li> <li>Code Conventions</li> <li>Testing &amp; Quality</li> <li>Documentation</li> <li>Reporting Bugs</li> <li>Feature Proposals</li> <li>Code of Conduct</li> </ol>"},{"location":"contributing/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"contributing/#local-setup","title":"Local Setup","text":"<ol> <li> <p>Clone the repository <pre><code>git clone https://github.com/AllDotPy/FletX.git\ncd FletX\n</code></pre></p> </li> <li> <p>Set up virtual environment (Recommended: UV) <pre><code>pip install uv\nuv venv\nsource venv/bin/activate  # Linux/Mac\n# or .\\venv\\Scripts\\activate  # Windows\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>uv pip install -e .[dev]  # Development mode\n</code></pre></p> </li> <li> <p>Verify installation <pre><code>pytest tests/\n</code></pre></p> </li> </ol>"},{"location":"contributing/#project-structure","title":"\ud83c\udfd7 Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 architecture.svg\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 fletx\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 core\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 controller.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 di.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 effects.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 factory.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 navigation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 guards.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 middleware.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 transitions.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 observer.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 page.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 route_config.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 router.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 state.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 types.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 widget.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 decorators\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 reactive.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 route.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utils\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 context.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exceptions.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 logger.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 widgets\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 text.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 setup.py\n</code></pre>"},{"location":"contributing/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":"<ol> <li> <p>Create a branch    Branch from <code>master</code> with descriptive naming:    <pre><code>git checkout -b feat/new-reactive-component\n</code></pre></p> </li> <li> <p>Implement changes </p> </li> <li>Keep commits atomic</li> <li> <p>Document new features</p> </li> <li> <p>Run tests <pre><code>uv pip install -e .[test]\npytest tests/\n</code></pre></p> </li> <li> <p>Submit a Pull Request</p> </li> <li>Clearly describe changes</li> <li>Reference related issues</li> <li>Address code review feedback</li> </ol>"},{"location":"contributing/#code-conventions","title":"\u2728 Code Conventions","text":""},{"location":"contributing/#style-guide","title":"Style Guide","text":"<ul> <li>Follow PEP 8 (88 chars max line length)</li> <li>Type hints for all public functions</li> <li>Google-style docstrings for key modules</li> </ul>"},{"location":"contributing/#reactivity-pattern","title":"Reactivity Pattern","text":"<pre><code># Good\nclass ReactiveButton(ft.ElevatedButton, FletXWidget):\n    \"\"\" My Reactive Button which.... \"\"\"\n\n    def __init__(self, text: RxStr, **kwargs):\n        super().__init__(**kwargs)\n        # Create a reactive object\n        self.rx_text: RxStr = RxStr('')\n        # And bind it to self (@ft.ElevatedButton) text attribute\n        self.bind('text', self.rx_text)\n</code></pre>"},{"location":"contributing/#widget-standards","title":"Widget Standards","text":"<ul> <li>Prefix reactive widgets with <code>Reactive</code></li> <li>Isolate state logic in dedicated classes</li> </ul>"},{"location":"contributing/#testing-quality","title":"\ud83e\uddea Testing &amp; Quality","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code>pytest tests/ --cov=fletx --cov-report=html\n</code></pre>"},{"location":"contributing/#quality-standards","title":"Quality Standards","text":"<ul> <li>Maintain &gt;90% code coverage</li> <li>All new widgets require:</li> <li>Unit tests</li> <li>Functional example</li> <li>Documentation</li> </ul>"},{"location":"contributing/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"contributing/#writing-docs","title":"Writing Docs","text":"<pre><code>class ReactiveText(ft.Text, FletXWidget):\n    \"\"\"Text widget with reactive value binding.\n\n    Args:\n        value: RxStr to bind to text value\n        color: RxStr for text color (optional)\n    \"\"\"\n</code></pre>"},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<pre><code>cd docs/\nmake html\n</code></pre>"},{"location":"contributing/#reporting-bugs","title":"\ud83d\udc1b Reporting Bugs","text":"<ol> <li>Check existing issues for duplicates</li> <li>Include:</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>FletX/Python versions</li> <li>Minimal reproducible example</li> </ol>"},{"location":"contributing/#feature-proposals","title":"\ud83d\udca1 Feature Proposals","text":"<ol> <li>Clearly describe the use case</li> <li>Suggest technical approach</li> <li>Outline potential impacts</li> <li>Attach mockups if applicable</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"\ud83e\udd1d Code of Conduct","text":"<p>We adhere to the Contributor Covenant Code of Conduct. By participating: - Be kind and open-minded - Respect differing viewpoints - Assume good faith</p> <p>Thank you for helping build FletX! Together we're creating the best reactive framework for Flet. \ud83d\ude80</p>"},{"location":"drafts/fletxapp/","title":"FletXApp Draft","text":""},{"location":"drafts/fletxapp/#documentation","title":"\ud83c\uddeb\ud83c\uddf7 Documentation","text":""},{"location":"drafts/fletxapp/#fletxapp","title":"<code>FletXApp</code>","text":""},{"location":"drafts/fletxapp/#description","title":"Description","text":"<p>La classe <code>FletXApp</code> est le point d\u2019entr\u00e9e principal d\u2019une application FletX, offrant une configuration fluide, un support pour les modes synchrone et asynchrone, et des hooks pour le cycle de vie (<code>on_startup</code>, <code>on_shutdown</code>).</p>"},{"location":"drafts/fletxapp/#parametres-du-constructeur","title":"Param\u00e8tres du constructeur","text":"Param\u00e8tre Type Description <code>initial_route</code> <code>str</code> Route initiale (ex: <code>/</code>) <code>theme_mode</code> <code>ft.ThemeMode</code> Mode du th\u00e8me (<code>SYSTEM</code>, <code>LIGHT</code>, <code>DARK</code>) <code>debug</code> <code>bool</code> Active le mode debug <code>title</code> <code>str</code> Titre de l\u2019application <code>theme</code> <code>Optional[ft.Theme]</code> Th\u00e8me clair <code>dark_theme</code> <code>Optional[ft.Theme]</code> Th\u00e8me sombre <code>window_config</code> <code>Optional[Dict]</code> Configuration de la fen\u00eatre (largeur, hauteur\u2026) <code>middlewares</code> <code>...</code> (D\u00e9pr\u00e9ci\u00e9) <code>on_startup</code> <code>Union[Callable, List[Callable]]</code> Hooks au d\u00e9marrage <code>on_shutdown</code> <code>Union[Callable, List[Callable]]</code> Hooks \u00e0 l\u2019arr\u00eat <code>**kwargs</code> <code>dict</code> Arguments suppl\u00e9mentaires pour <code>ft.app()</code>"},{"location":"drafts/fletxapp/#methodes-cles","title":"M\u00e9thodes cl\u00e9s","text":"<ul> <li><code>with_title(title: str)</code>: d\u00e9finit le titre (fluent).</li> <li><code>with_theme(theme: ft.Theme)</code>: th\u00e8me clair (fluent).</li> <li><code>with_dark_theme(dark_theme: ft.Theme)</code>: th\u00e8me sombre (fluent).</li> <li><code>with_window_size(width: int, height: int)</code>: configure la fen\u00eatre (fluent).</li> <li><code>with_debug(debug: bool)</code>: active/d\u00e9sactive le debug (fluent).</li> <li><code>add_startup_hook(hook: Callable)</code>: ajoute un hook au d\u00e9marrage.</li> <li><code>add_shutdown_hook(hook: Callable)</code>: ajoute un hook \u00e0 la fermeture.</li> <li><code>run(**kwargs)</code>, <code>run_async(**kwargs)</code>: ex\u00e9cution sync/async.</li> <li><code>run_web(host, port, **kwargs)</code>, <code>run_desktop(**kwargs)</code>: modes web ou bureau.</li> <li><code>is_initialized</code>, <code>page</code>: propri\u00e9t\u00e9s d\u2019\u00e9tat.</li> <li><code>get_context_data(key, default)</code>, <code>set_context_data(key, value)</code>: acc\u00e8s au <code>AppContext</code>.</li> </ul>"},{"location":"drafts/fletxapp/#cycle-de-vie","title":"Cycle de vie","text":"<ol> <li>Configuration de la fen\u00eatre et du th\u00e8me.</li> <li>Ex\u00e9cution des hooks <code>on_startup</code>.</li> <li>Initialisation du <code>AppContext</code> et du <code>FletXRouter</code>.</li> <li>Passage en mode <code>is_initialized = True</code>.</li> <li>\u00c0 la fermeture, ex\u00e9cution des hooks <code>on_shutdown</code>.</li> </ol>"},{"location":"drafts/fletxapp/#exemples-dutilisation","title":"Exemples d\u2019utilisation","text":"<pre><code>from fletx.app import FletXApp\nimport flet as ft\n\n# Ex\u00e9cution simple (mode sync)\napp = (FletXApp(title=\"Ma Super App\", initial_route=\"/home\", debug=True)\n       .with_window_size(450, 700)\n       .with_theme(ft.Theme(color_scheme_seed=ft.Colors.BLUE)))\napp.run()\n</code></pre> <pre><code># Mode web asynchrone avec hooks\nasync def on_start(page: ft.Page):\n    print(\"D\u00e9marrage\")\n\ndef on_stop(page: ft.Page):\n    print(\"Arr\u00eat\")\n\napp = FletXApp(\n    title=\"App Web\",\n    debug=False,\n    on_startup=on_start,\n    on_shutdown=on_stop\n)\napp.run_web(host=\"0.0.0.0\", port=8080)\n</code></pre>"},{"location":"drafts/fletxapp/#documentation_1","title":"\ud83c\uddec\ud83c\udde7 Documentation","text":""},{"location":"drafts/fletxapp/#fletxapp_1","title":"<code>FletXApp</code>","text":""},{"location":"drafts/fletxapp/#description_1","title":"Description","text":"<p><code>FletXApp</code> is the main entry point for a FletX application. It provides fluent configuration, supports both synchronous and asynchronous execution modes, and lifecycle hooks (<code>on_startup</code>, <code>on_shutdown</code>).</p>"},{"location":"drafts/fletxapp/#constructor-parameters","title":"Constructor Parameters","text":"Parameter Type Description <code>initial_route</code> <code>str</code> Initial route (e.g. <code>/</code>) <code>theme_mode</code> <code>ft.ThemeMode</code> Theme mode (<code>SYSTEM</code>, <code>LIGHT</code>, <code>DARK</code>) <code>debug</code> <code>bool</code> Enable debug mode <code>title</code> <code>str</code> App title <code>theme</code> <code>Optional[ft.Theme]</code> Light theme <code>dark_theme</code> <code>Optional[ft.Theme]</code> Dark theme <code>window_config</code> <code>Optional[Dict]</code> Window config (width, height\u2026) <code>middlewares</code> <code>...</code> (Deprecated) <code>on_startup</code> <code>Union[Callable, List[Callable]]</code> Startup hooks <code>on_shutdown</code> <code>Union[Callable, List[Callable]]</code> Shutdown hooks <code>**kwargs</code> <code>dict</code> Additional <code>ft.app()</code> params"},{"location":"drafts/fletxapp/#key-methods","title":"Key Methods","text":"<ul> <li><code>with_title(title)</code>: set title (fluent).</li> <li><code>with_theme(theme)</code>: set light theme (fluent).</li> <li><code>with_dark_theme(dark_theme)</code>: set dark theme (fluent).</li> <li><code>with_window_size(w,h)</code>: configure window (fluent).</li> <li><code>with_debug(debug)</code>: toggle debug mode (fluent).</li> <li><code>add_startup_hook(hook)</code>, <code>add_shutdown_hook(hook)</code> to add lifecycle hooks.</li> <li><code>run()</code>, <code>run_async()</code>: synchronous/asynchronous execution.</li> <li><code>run_web(host,port)</code>, <code>run_desktop()</code>: run in web or desktop mode.</li> <li><code>is_initialized</code>, <code>page</code>: status properties.</li> <li><code>get_context_data(key, default)</code>, <code>set_context_data(key, value)</code>: get/set context data.</li> </ul>"},{"location":"drafts/fletxapp/#lifecycle-overview","title":"Lifecycle Overview","text":"<ol> <li>Setup window and theme.</li> <li>Execute <code>on_startup</code> hooks.</li> <li>Initialize <code>AppContext</code> and <code>FletXRouter</code>.</li> <li>Set <code>is_initialized</code> to <code>True</code>.</li> <li>On exit, execute <code>on_shutdown</code> hooks.</li> </ol>"},{"location":"drafts/fletxapp/#usage-examples","title":"Usage Examples","text":"<pre><code>from fletx.app import FletXApp\nimport flet as ft\n\n# Simple sync run\napp = (FletXApp(title=\"My App\", initial_route=\"/home\", debug=True)\n       .with_window_size(450, 700)\n       .with_theme(ft.Theme(color_scheme_seed=ft.Colors.BLUE)))\napp.run()\n</code></pre> <pre><code># Async web run with hooks\nasync def on_start(page: ft.Page):\n    print(\"App started\")\n\ndef on_stop(page: ft.Page):\n    print(\"App stopped\")\n\napp = FletXApp(\n    title=\"Web App\",\n    debug=False,\n    on_startup=on_start,\n    on_shutdown=on_stop\n)\napp.run_web(host=\"0.0.0.0\", port=8080)\n</code></pre>"},{"location":"drafts/fletxapp/#tests-avec-pytest","title":"\ud83c\uddeb\ud83c\uddf7 Tests avec <code>pytest</code>","text":"<pre><code># test_fletx_app.py\n\nimport pytest\nimport flet\nfrom fletx.app import FletXApp\nfrom fletx.utils.context import AppContext\n\n@pytest.fixture(autouse=True)\ndef reset_context():\n    AppContext._data.clear()\n    yield\n    AppContext._data.clear()\n\ndef test_sync_run_initializes(tmp_path, monkeypatch):\n    calls = []\n\n    def fake_app(target, **kwargs):\n        class DummyPage:\n            title = \"\"\n            theme = None\n            dark_theme = None\n            window = type(\"W\", (), {})()\n            def update(self): pass\n        page = DummyPage()\n        target(page)\n        calls.append(page)\n\n    monkeypatch.setattr(flet, \"app\", fake_app)\n\n    app = FletXApp(title=\"Test\", debug=True, initial_route=\"/foo\")\n    app.run()\n\n    assert app.is_initialized\n    assert isinstance(app.page, object)\n    assert AppContext.get_data(\"app\") == app\n\ndef test_on_startup_and_shutdown_hooks(monkeypatch):\n    calls = []\n    async def async_hook(page): calls.append(\"start-async\")\n    def sync_hook(page): calls.append(\"start-sync\")\n    def shutdown_hook(page): calls.append(\"stop-sync\")\n\n    def fake_app(target, **kwargs):\n        class Dummy:\n            title = \"\"\n            theme = None\n            dark_theme = None\n            window = type(\"W\", (), {})()\n            def update(self): pass\n        page = Dummy()\n        target(page)\n        return\n\n    monkeypatch.setattr(flet, \"app\", fake_app)\n\n    app = FletXApp(on_startup=[async_hook, sync_hook], on_shutdown=shutdown_hook)\n    app.run()\n\n    assert \"start-async\" in calls\n    assert \"start-sync\" in calls\n    assert \"stop-sync\" in calls\n\ndef test_context_data_set_get():\n    app = FletXApp()\n    app.set_context_data(\"foo\", 42)\n    assert app.get_context_data(\"foo\") == 42\n    assert app.get_context_data(\"bar\", \"baz\") == \"baz\"\n</code></pre>"},{"location":"drafts/fletxapp/#tests-with-pytest","title":"\ud83c\uddec\ud83c\udde7 Tests with <code>pytest</code>","text":"<pre><code># test_fletx_app.py\n\nimport pytest\nimport flet\nfrom fletx.app import FletXApp\nfrom fletx.utils.context import AppContext\n\n@pytest.fixture(autouse=True)\ndef reset_context():\n    AppContext._data.clear()\n    yield\n    AppContext._data.clear()\n\ndef test_sync_run_initializes(tmp_path, monkeypatch):\n    calls = []\n\n    def fake_app(target, **kwargs):\n        class DummyPage:\n            title = \"\"\n            theme = None\n            dark_theme = None\n            window = type(\"W\", (), {})()\n            def update(self): pass\n        page = DummyPage()\n        target(page)\n        calls.append(page)\n\n    monkeypatch.setattr(flet, \"app\", fake_app)\n\n    app = FletXApp(title=\"Test\", debug=True, initial_route=\"/foo\")\n    app.run()\n\n    assert app.is_initialized\n    assert isinstance(app.page, object)\n    assert AppContext.get_data(\"app\") == app\n\ndef test_on_startup_and_shutdown_hooks(monkeypatch):\n    calls = []\n    async def async_hook(page): calls.append(\"start-async\")\n    def sync_hook(page): calls.append(\"start-sync\")\n    def shutdown_hook(page): calls.append(\"stop-sync\")\n\n    def fake_app(target, **kwargs):\n        class Dummy:\n            title = \"\"\n            theme = None\n            dark_theme = None\n            window = type(\"W\", (), {})()\n            def update(self): pass\n        page = Dummy()\n        target(page)\n        return\n\n    monkeypatch.setattr(flet, \"app\", fake_app)\n\n    app = FletXApp(on_startup=[async_hook, sync_hook], on_shutdown=shutdown_hook)\n    app.run()\n\n    assert \"start-async\" in calls\n    assert \"start-sync\" in calls\n    assert \"stop-sync\" in calls\n\ndef test_context_data_set_get():\n    app = FletXApp()\n    app.set_context_data(\"foo\", 42)\n    assert app.get_context_data(\"foo\") == 42\n    assert app.get_context_data(\"bar\", \"baz\") == \"baz\"\n</code></pre> <p>\ud83d\udca1 \u00c0 noter : les tests simulent <code>flet.app()</code> pour forcer l\u2019ex\u00e9cution de <code>target(page)</code>. Les hooks asynchrones sont correctement pris en charge. Si tu veux aller plus loin, je peux ajouter des tests pour <code>run_async</code>, <code>run_web</code>, <code>run_desktop</code>, etc. veux-tu que je m\u2019en occupe ?</p> <pre><code>\"\"\"\nExemples d'utilisation de la nouvelle FletXApp\n\"\"\"\n\nimport flet as ft\nfrom fletx.app import FletXApp\n\n# ==============================\n# EXEMPLE 1: Configuration Simple\n# ==============================\n\ndef example_simple():\n    \"\"\"Exemple basique avec configuration simple\"\"\"\n\n    app = FletXApp(\n        title=\"Mon App FletX\",\n        initial_route=\"/\",\n        debug=True\n    ).with_window_size(400, 600).with_theme(\n        ft.Theme(color_scheme_seed=ft.Colors.BLUE)\n    )\n\n    # Run sync\n    app.run()\n\n# ==============================\n# EXEMPLE 2: Configuration Avanc\u00e9e\n# ==============================\n\ndef example_advanced():\n    \"\"\"Exemple avec configuration avanc\u00e9e\"\"\"\n\n    # Hooks de d\u00e9marrage et arr\u00eat\n    async def on_startup(page: ft.Page):\n        print(\"App d\u00e9marr\u00e9e!\")\n        # Initialiser des services, base de donn\u00e9es, etc.\n\n    def on_shutdown(page: ft.Page):\n        print(\"App ferm\u00e9e!\")\n        # Nettoyer les ressources\n\n    # Middleware\n    def auth_middleware(page: ft.Page):\n        print(\"V\u00e9rification d'authentification...\")\n\n    app = FletXApp(\n        title=\"App Avanc\u00e9e\",\n        initial_route=\"/dashboard\",\n        debug=True,\n        theme=ft.Theme(color_scheme_seed=ft.Colors.GREEN),\n        dark_theme=ft.Theme(\n            color_scheme_seed=ft.Colors.BLUE_800,\n            scaffold_bgcolor=ft.Colors.BLACK\n        ),\n        window_config={\n            \"width\": 800,\n            \"height\": 600,\n            \"resizable\": True,\n            \"maximizable\": True\n        },\n        middlewares=[auth_middleware],\n        on_startup=on_startup,\n        on_shutdown=on_shutdown\n    )\n\n    # Run async\n    app.run_async()\n\n# ==============================\n# EXEMPLE 3: Style Fluent Interface\n# ==============================\n\ndef example_fluent():\n    \"\"\"Exemple avec interface fluide\"\"\"\n\n    def logging_middleware(page: ft.Page):\n        print(f\"Page: {page.title} - Route: {page.route}\")\n\n    async def setup_database(page: ft.Page):\n        print(\"Configuration de la base de donn\u00e9es...\")\n        # Simulation d'une t\u00e2che async\n        import asyncio\n        await asyncio.sleep(0.1)\n\n    app = (FletXApp()\n           .with_title(\"Interface Fluide\")\n           .with_window_size(1000, 700)\n           .with_theme(ft.Theme(color_scheme_seed=ft.Colors.PURPLE))\n           .with_debug(True)\n           .add_middleware(logging_middleware)\n           .add_startup_hook(setup_database))\n\n    app.run_web(port=8080)\n\n# ==============================\n# EXEMPLE 4: Mode Web avec Hooks Multiples\n# ==============================\n\ndef example_web_app():\n    \"\"\"Exemple d'application web avec hooks multiples\"\"\"\n\n    async def init_services(page: ft.Page):\n        print(\"Initialisation des services...\")\n\n    async def load_config(page: ft.Page):\n        print(\"Chargement de la configuration...\")\n\n    def cleanup_temp_files(page: ft.Page):\n        print(\"Nettoyage des fichiers temporaires...\")\n\n    app = FletXApp(\n        title=\"Web App FletX\",\n        theme_mode=ft.ThemeMode.LIGHT,\n        on_startup=[init_services, load_config],\n        on_shutdown=cleanup_temp_files\n    )\n\n    app.run_web(host=\"0.0.0.0\", port=3000)\n\n# ==============================\n# EXEMPLE 5: Usage avec ft.app (style classique am\u00e9lior\u00e9)\n# ==============================\n\ndef example_classic_style():\n    \"\"\"Exemple avec style classique mais am\u00e9lior\u00e9\"\"\"\n\n    app = FletXApp(\n        title=\"Style Classique\",\n        initial_route=\"/home\",\n        debug=True,\n        window_config={\"width\": 500, \"height\": 400}\n    )\n\n    def main(page: ft.Page):\n        # Configuration personnalis\u00e9e de la page si n\u00e9cessaire\n        page.bgcolor = ft.Colors.BLUE_50\n\n        # Utiliser le handler de l'app\n        app._sync_main(page)\n\n    ft.app(target=main)\n\n# ==============================\n# EXEMPLE 6: Application Async Compl\u00e8te\n# ==============================\n\ndef example_async_complete():\n    \"\"\"Exemple d'application compl\u00e8tement asynchrone\"\"\"\n\n    async def async_main():\n        app = FletXApp(title=\"App Async\")\n\n        async def main_handler(page: ft.Page):\n            await app._async_main(page)\n\n            # Logique async personnalis\u00e9e apr\u00e8s initialisation\n            print(\"Application initialis\u00e9e, d\u00e9marrage des t\u00e2ches de fond...\")\n\n        # Utiliser le handler async\n        ft.app(target=lambda page: asyncio.run(main_handler(page)))\n\n    import asyncio\n    asyncio.run(async_main())\n\n# ==============================\n# EXEMPLE 7: Configuration Dynamique\n# ==============================\n\ndef example_dynamic_config():\n    \"\"\"Exemple avec configuration dynamique\"\"\"\n\n    # Configuration bas\u00e9e sur l'environnement\n    import os\n    is_production = os.getenv(\"ENV\") == \"production\"\n\n    app = FletXApp(\n        debug=not is_production,\n        theme_mode=ft.ThemeMode.DARK if is_production else ft.ThemeMode.LIGHT,\n        window_config={\n            \"width\": 1200 if is_production else 800,\n            \"height\": 800 if is_production else 600\n        }\n    )\n\n    # Configuration conditionnelle\n    if not is_production:\n        app.add_middleware(lambda page: print(f\"DEBUG: Route = {page.route}\"))\n\n    app.run_desktop()\n\nif __name__ == \"__main__\":\n    # Lancer un des exemples\n    example_fluent()\n</code></pre>"},{"location":"drafts/fletxcli/","title":"Fletxcli","text":""},{"location":"drafts/fletxcli/#fletx-cli-documentation","title":"\ud83c\uddeb\ud83c\uddf7 FletX CLI - Documentation","text":""},{"location":"drafts/fletxcli/#introduction","title":"Introduction","text":"<p>Le CLI de FletX (<code>fletx</code>) est un outil en ligne de commande qui facilite la gestion des projets FletX. Il vous permet de :</p> <ul> <li>Cr\u00e9er un nouveau projet FletX</li> <li>G\u00e9n\u00e9rer des composants (contr\u00f4leurs, services, pages, etc.)</li> <li>Ex\u00e9cuter votre projet avec diff\u00e9rentes options</li> </ul>"},{"location":"drafts/fletxcli/#commande-principale","title":"Commande principale","text":"<pre><code>fletx &lt;commande&gt; [options]\n</code></pre>"},{"location":"drafts/fletxcli/#commandes-disponibles","title":"Commandes disponibles","text":"Cat\u00e9gorie Commande Description Gestion de projet <code>new</code> Cr\u00e9e un nouveau projet FletX \u00e0 partir d'un mod\u00e8le G\u00e9n\u00e9ration de code <code>generate</code> G\u00e9n\u00e8re des composants comme des contr\u00f4leurs, services... Utilitaires <code>run</code> Ex\u00e9cute un projet FletX avec diverses options <p>\ud83d\udc49 Aide sp\u00e9cifique :</p> <pre><code>fletx &lt;commande&gt; --help\nfletx help &lt;commande&gt;\n</code></pre>"},{"location":"drafts/fletxcli/#fletx-new","title":"<code>fletx new</code>","text":"<p>Cr\u00e9er un nouveau projet FletX.</p> <pre><code>fletx new &lt;nom_du_projet&gt; [options]\n</code></pre>"},{"location":"drafts/fletxcli/#options","title":"Options","text":"Option Description Par d\u00e9faut <code>--template TEMPLATE</code> Mod\u00e8le \u00e0 utiliser pour le projet <code>project</code> <code>--directory DIRECTORY</code> Dossier o\u00f9 cr\u00e9er le projet dossier courant <code>--author AUTHOR</code> Nom de l'auteur <code>--description DESCRIPTION</code> Description du projet <code>--version VERSION</code> Version initiale du projet <code>0.1.0</code> <code>--python-version PYTHON_VERSION</code> Version minimale de Python requise <code>3.12</code> <code>--overwrite</code> \u00c9crase les fichiers existants si pr\u00e9sents <code>--no-install</code> Ne pas installer les d\u00e9pendances apr\u00e8s cr\u00e9ation"},{"location":"drafts/fletxcli/#fletx-generate","title":"<code>fletx generate</code>","text":"<p>G\u00e9n\u00e9rer un composant de votre projet.</p> <pre><code>fletx generate &lt;type&gt; &lt;nom&gt; [options]\n</code></pre> <p>o\u00f9 <code>&lt;type&gt;</code> peut \u00eatre : <code>controller</code>, <code>service</code>, <code>model</code>, <code>component</code>, <code>page</code></p>"},{"location":"drafts/fletxcli/#options_1","title":"Options","text":"Option Description Par d\u00e9faut <code>--output-dir OUTPUT_DIR</code> Dossier de sortie bas\u00e9 sur le type <code>--template TEMPLATE</code> Mod\u00e8le sp\u00e9cifique \u00e0 utiliser bas\u00e9 sur le type <code>--overwrite</code> \u00c9crase les fichiers existants <code>--with-test</code> G\u00e9n\u00e8re un fichier de test pour le composant"},{"location":"drafts/fletxcli/#fletx-run","title":"<code>fletx run</code>","text":"<p>Ex\u00e9cutez votre projet FletX.</p> <pre><code>fletx run [target] [options]\n</code></pre> <p>o\u00f9 <code>target</code> est le fichier Python \u00e0 ex\u00e9cuter (par d\u00e9faut : <code>main.py</code>)</p>"},{"location":"drafts/fletxcli/#options_2","title":"Options","text":"Option Description Par d\u00e9faut <code>--host HOST</code> H\u00f4te de liaison <code>localhost</code> <code>--port PORT</code> Port de liaison <code>8550</code> <code>--debug</code> Mode debug <code>--watch</code> Active le hot reload (surveillance des fichiers) <code>--web</code> Ouvre dans un navigateur web <code>--desktop</code> Force le mode desktop <code>--android</code> Ouvre sur un appareil Android <code>--ios</code> Ouvre sur un appareil iOS <code>--assets-dir ASSETS_DIR</code> Dossier des assets <code>--ignore-dir IGNORE_DIR</code> Dossier \u00e0 ignorer <code>--env ENV</code> Variables d'environnement <code>KEY=VALUE</code> <code>--requirements REQUIREMENTS</code> Fichier <code>requirements.txt</code> \u00e0 utiliser <code>--install-deps</code> Installe les d\u00e9pendances avant d'ex\u00e9cuter <code>--verbose</code> Affiche des logs d\u00e9taill\u00e9s"},{"location":"drafts/fletxcli/#exemple-creation-et-execution","title":"Exemple : Cr\u00e9ation et ex\u00e9cution","text":"<pre><code># Cr\u00e9er un projet\nfletx new mon_projet --author \"Jean Dupont\" --description \"Mon app FletX\"\n\n# G\u00e9n\u00e9rer un contr\u00f4leur\nfletx generate controller MonControleur --with-test\n\n# Ex\u00e9cuter le projet\nfletx run --web --debug\n</code></pre>"},{"location":"drafts/fletxcli/#fletx-cli-documentation_1","title":"\ud83c\uddec\ud83c\udde7 FletX CLI - Documentation","text":""},{"location":"drafts/fletxcli/#introduction_1","title":"Introduction","text":"<p>The FletX CLI (<code>fletx</code>) is a command-line tool that makes it easy to manage FletX projects. It lets you:</p> <ul> <li>Create a new FletX project</li> <li>Generate components (controllers, services, pages, etc.)</li> <li>Run your project with various options</li> </ul>"},{"location":"drafts/fletxcli/#main-command","title":"Main command","text":"<pre><code>fletx &lt;command&gt; [options]\n</code></pre>"},{"location":"drafts/fletxcli/#available-commands","title":"Available commands","text":"Category Command Description Project Management <code>new</code> Create a new FletX project from template Code Generation <code>generate</code> Generate components like controllers, services, etc. Utilities <code>run</code> Run a FletX project with various options <p>\ud83d\udc49 Specific help :</p> <pre><code>fletx &lt;command&gt; --help\nfletx help &lt;command&gt;\n</code></pre>"},{"location":"drafts/fletxcli/#fletx-new_1","title":"<code>fletx new</code>","text":"<p>Create a new FletX project.</p> <pre><code>fletx new &lt;project_name&gt; [options]\n</code></pre>"},{"location":"drafts/fletxcli/#options_3","title":"Options","text":"Option Description Default <code>--template TEMPLATE</code> Template to use for the project <code>project</code> <code>--directory DIRECTORY</code> Directory where the project will be created current directory <code>--author AUTHOR</code> Author name for the project <code>--description DESCRIPTION</code> Project description <code>--version VERSION</code> Initial version of the project <code>0.1.0</code> <code>--python-version PYTHON_VERSION</code> Minimum required Python version <code>3.12</code> <code>--overwrite</code> Overwrite existing files if they exist <code>--no-install</code> Don't install dependencies after creating the project"},{"location":"drafts/fletxcli/#fletx-generate_1","title":"<code>fletx generate</code>","text":"<p>Generate a component for your project.</p> <pre><code>fletx generate &lt;type&gt; &lt;name&gt; [options]\n</code></pre> <p>where <code>&lt;type&gt;</code> can be: <code>controller</code>, <code>service</code>, <code>model</code>, <code>component</code>, <code>page</code></p>"},{"location":"drafts/fletxcli/#options_4","title":"Options","text":"Option Description Default <code>--output-dir OUTPUT_DIR</code> Output directory based on type <code>--template TEMPLATE</code> Specific template to use based on type <code>--overwrite</code> Overwrite existing files <code>--with-test</code> Generate a test file for the component"},{"location":"drafts/fletxcli/#fletx-run_1","title":"<code>fletx run</code>","text":"<p>Run your FletX project.</p> <pre><code>fletx run [target] [options]\n</code></pre> <p>where <code>target</code> is the Python file to run (default: <code>main.py</code>)</p>"},{"location":"drafts/fletxcli/#options_5","title":"Options","text":"Option Description Default <code>--host HOST</code> Host to bind to <code>localhost</code> <code>--port PORT</code> Port to bind to <code>8550</code> <code>--debug</code> Run in debug mode <code>--watch</code> Enable hot reload (directory watch) <code>--web</code> Open in a web browser <code>--desktop</code> Force desktop mode <code>--android</code> Open on an Android device <code>--ios</code> Open on an iOS device <code>--assets-dir ASSETS_DIR</code> Path to assets directory <code>--ignore-dir IGNORE_DIR</code> Path to ignore directory <code>--env ENV</code> Environment variables <code>KEY=VALUE</code> <code>--requirements REQUIREMENTS</code> Path to <code>requirements.txt</code> file <code>--install-deps</code> Install dependencies before running <code>--verbose</code> Verbose output"},{"location":"drafts/fletxcli/#example-create-and-run","title":"Example: Create and run","text":"<pre><code># Create a project\nfletx new my_project --author \"John Doe\" --description \"My FletX app\"\n\n# Generate a controller\nfletx generate controller MyController --with-test\n\n# Run the project\nfletx run --web --debug\n</code></pre>"},{"location":"drafts/fletxservice/","title":"FletXService","text":"<p>Example Usage <pre><code># Exemple d'impl\u00e9mentation concr\u00e8te\nclass APIService(FletXService):\n    \"\"\"Exemple de service API utilisant FletXService\"\"\"\n\n    def __init__(self, base_url: str, **kwargs):\n        self.base_url = base_url\n        super().__init__(**kwargs)\n\n    def on_start(self):\n        \"\"\"Initialisation du service API\"\"\"\n        self.set_data('base_url', self.base_url)\n        self.log_info(f\"API Service initialized with base URL: {self.base_url}\")\n\n    async def fetch_data(self, endpoint: str) -&gt; Dict[str, Any]:\n        \"\"\"Exemple de m\u00e9thode utilisant le client HTTP\"\"\"\n        if not self.is_ready:\n            raise RuntimeError(\"Service not ready\")\n\n        if self.http_client:\n            # Utilisation du client HTTP FletX\n            url = f\"{self.base_url}/{endpoint}\"\n            response = await self.http_client.get(url)\n            return response\n        else:\n            # Simulation sans client HTTP\n            self.log_info(f\"Fetching data from {endpoint}\")\n            return {\"data\": f\"Mock data from {endpoint}\"}\n\n\n# Exemple d'utilisation\nif __name__ == \"__main__\":\n    # Service synchrone\n    api_service = APIService(\"https://api.example.com\", name=\"ExampleAPI\")\n\n    # Ajouter des listeners\n    api_service.on('ready', lambda _: print(\"Service is ready!\"))\n    api_service.on('error', lambda error: print(f\"Service error: {error}\"))\n\n    print(api_service)\n    print(f\"Is ready: {api_service.is_ready}\")\n    print(f\"Data: {api_service.data}\")\n</code></pre></p>"},{"location":"drafts/index1/","title":"Index1","text":""},{"location":"drafts/index1/#welcome-to-fletx","title":"\u2728 Welcome to FletX","text":"<ul> <li> <p> Get Started</p> <p>Set up EasySwitch and make your first API call in minutes.</p> <p>-&gt; Installation Guide</p> </li> <li> <p> API Reference</p> <p>Complete reference for all available methods and configurations.</p> <p>-&gt; API Documentation</p> </li> <li> <p> Payment Guides</p> <p>Learn how to process mobile money payments across different providers.</p> <p>-&gt; Send Payments | -&gt; Webhooks</p> </li> <li> <p> Contribute</p> <p>Help improve EasySwitch with your contributions and feedback.</p> <p>-&gt; Contribution Guide</p> </li> </ul>"},{"location":"drafts/index1/#what-is-fletx","title":"\u2728 What is FletX?","text":"<p>FletX is a lightweight, modular, and reactive architectural framework built on top of Flet, designed to help you build scalable Python UI applications with clean code, structured layers, and modern development patterns.</p> <p>Inspired by frameworks like GetX in the Flutter ecosystem, FletX brings separation of concerns, dependency injection, reactive state management, and declarative routing to Flet \u2014 without adding unnecessary complexity.</p>"},{"location":"drafts/index1/#why-fletx","title":"\u2728 Why FletX?","text":"<p>While Flet offers a powerful UI toolkit in Python, larger apps quickly become hard to maintain without a solid architecture. FletX solves that by introducing:</p> <ul> <li>\u2705 Reactive state management </li> <li>\u2705 Modular routing system with dynamic parameters and guards  </li> <li>\u2705 Controllers and services to separate logic from UI  </li> <li>\u2705 Global and local dependency injection </li> <li>\u2705 Lifecycle hooks for pages and the app  </li> <li>\u2705 Unified configuration with fluent API </li> <li>\u2705 Built-in support for asynchronous programming </li> </ul>"},{"location":"drafts/index1/#philosophy","title":"\ud83e\udde0 Philosophy","text":"<p>FletX is built on 3 principles:</p> <ol> <li>Simplicity \u2014 Focus on code clarity and maintainability.</li> <li>Modularity \u2014 Encourage component-based structure and reusable logic.</li> <li>Flexibility \u2014 Allow full control over your app flow, while staying non-intrusive.</li> </ol> <p>FletX is not a UI library. It doesn\u2019t reinvent Flet\u2019s widgets \u2014 it empowers you to use them better by providing a powerful and extensible application layer.</p> <p>Explore further:</p> <ul> <li>GitHub Repository for source code and issues</li> <li>PyPI Package for latest releases</li> <li>Community Forum (coming soon) for support and discussions</li> </ul>"},{"location":"drafts/index1/#quick-example","title":"Quick Example","text":"<pre><code>import flet as ft\n\nfrom fletx.app import FletXApp\nfrom fletx.core import (\n    FletXPage, FletXController, RxInt, RxStr\n)\nfrom fletx.navigation import router_config\nfrom fletx.decorators import (\n    simple_reactive\n)\n\n\nclass CounterController(FletXController):\n\n    def __init__(self):\n        count = RxInt(0)  # Reactive state\n        super().__init__()\n\n\n@simple_reactive(\n    bindings={\n        'value': 'text'\n    }\n)\nclass MyReactiveText(ft.Text):\n\n    def __init__(self, rx_text: RxStr, **kwargs):\n        self.text: RxStr = rx_text\n        super().__init__(**kwargs)\n\nclass CounterPage(FletXPage):\n    ctrl = CounterController()\n\n    def build(self):\n        return ft.Column(\n            controls = [\n                MyReactiveText(rx_text=self.ctrl.count, size=200, weight=\"bold\"),\n                ft.ElevatedButton(\n                    \"Increment\",\n                    on_click = lambda e: self.ctrl.count.increment()  # Auto UI update\n                )\n            ]\n        )\n\n\ndef main():\n\n    # Defining route\n    router_config.add_route(\n        **{'path': '/', 'component': CounterPage}\n    )\n    app = FletXApp(\n        title = \"My Counter\",\n        initial_route = \"/\",\n        debug = True\n    ).with_window_size(400, 600).with_theme(\n        ft.Theme(color_scheme_seed=ft.Colors.BLUE)\n    )\n\n    # Run sync\n    app.run()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"getting-started/architecture/","title":"\ud83c\udfd7\ufe0f FletX Architecture","text":"<p>FletX is built on a modular and reactive architecture designed to help developers structure Flet applications in a clean, maintainable, and scalable way. It is inspired by principles like separation of concerns and dependency injection.</p>"},{"location":"getting-started/architecture/#overview","title":"\ud83d\udcda Overview","text":"<p>FletX architecture revolves around three core components:</p> <ol> <li>Pages (<code>FletXPage</code>) \u2013 declarative, reactive UI components.</li> <li>Controllers (<code>FletXController</code>) \u2013 business logic and state management.</li> <li>Services (optional) \u2013 reusable utilities for API calls, database access, etc.</li> </ol>"},{"location":"getting-started/architecture/#typical-flow","title":"\ud83d\udd04 Typical Flow","text":"<p>A typical user interaction flows like this:</p> <pre><code>User Action \u2192 Controller Logic \u2192 State Update \u2192 UI Re-render\n</code></pre> <p>When routing/navigation happens, it flows like this:</p> <pre><code>Routing \u2192 Page Instantiation \u2192 Controller Injection \u2192 Build UI\n</code></pre>"},{"location":"getting-started/architecture/#core-building-blocks","title":"\ud83e\uddf1 Core Building Blocks","text":""},{"location":"getting-started/architecture/#1-fletxpage","title":"1. FletXPage","text":"<p>A FletXPage is a class that represents a visual page (screen) in your app. It inherits from <code>FletXPage</code> and defines a <code>build()</code> method that returns a reactive Flet UI.</p>"},{"location":"getting-started/architecture/#example","title":"Example:","text":"<pre><code>class HomePage(FletXPage):\n    ctrl = HomeController()\n\n    def build(self):\n        return ft.Column([\n            ft.Text(lambda: str(self.ctrl.counter()), size=40),\n            ft.ElevatedButton(\"Increment\", on_click=lambda e: self.ctrl.counter.increment())\n        ])\n</code></pre>"},{"location":"getting-started/architecture/#2-fletxcontroller","title":"2. FletXController","text":"<p>A FletXController handles business logic, manages reactive state, and is tied to a specific page. It uses observable values to trigger UI updates automatically.</p>"},{"location":"getting-started/architecture/#example_1","title":"Example:","text":"<pre><code>class HomeController(FletXController):\n    def __init__(self):\n        self.counter = RxInt(0)\n        super().__init__()\n</code></pre> <p><code>RxInt</code> is a reactive object provided by FletX. Updating it automatically refreshes all widgets that depend on it.</p>"},{"location":"getting-started/architecture/#navigation-routing","title":"\ud83d\udd17 Navigation &amp; Routing","text":"<p>FletX provides a centralized router configuration (<code>router_config</code>) for managing navigation across your app:</p> <pre><code>router_config.add_route(\"/\", HomePage)\nrouter_config.add_route(\"/about\", AboutPage)\n\n# Or register a list of routes\nrouter_config.add_routes([\n    {\"path\": \"/\", \"component\": HomePage},\n    {\"path\": \"/settings\", \"component\": SettingsPage}\n])\n</code></pre> <p>You can define dynamic routes like:</p> <pre><code>router_config.add_route(\"/user/:id\", UserPage)\nrouter_config.add_route(\"/user/*category\", CategoryPage)\n</code></pre> <p>In your page:</p> <pre><code>def build(self):\n    user_id = self.route_info.params[\"id\"]\n</code></pre>"},{"location":"getting-started/architecture/#reactive-state-management","title":"\ud83e\udde0 Reactive State Management","text":"<p>FletX provides reactive variables: <code>RxInt</code>, <code>RxStr</code>, <code>RxList</code>, etc., which track their values and trigger UI updates when modified.</p>"},{"location":"getting-started/architecture/#example_2","title":"Example:","text":"<pre><code>class CounterController(FletXController):\n    def __init__(self):\n        self.count = RxInt(0)\n        super().__init__()\n\nclass CounterPage(FletXPage):\n    ctrl = CounterController()\n\n    def build(self):\n        return MyReactiveText(rx_text=self.ctrl.count, size=200, weight=\"bold\"),\n</code></pre> <p><code>lambda:</code> makes the widget reactive \u2014 it will re-render automatically when the value changes.</p>"},{"location":"getting-started/architecture/#services-optional","title":"\ud83e\udde9 Services (Optional)","text":"<p>Services are reusable, testable classes used for accessing APIs, databases, or any shared logic. They can be injected into controllers.</p>"},{"location":"getting-started/architecture/#example_3","title":"Example:","text":"<pre><code>class UserService:\n    def fetch_user(self, user_id):\n        return {\"id\": user_id, \"name\": \"John Doe\"}\n</code></pre> <p>Used in a controller:</p> <pre><code>class UserController(FletXController):\n    def __init__(self):\n        self.user_service = FletX.find(UserService)\n        self.user = RxDict({})\n        super().__init__()\n\n    def load_user(self, user_id):\n        self.user.value =  self.user_service.fetch_user(user_id)\n</code></pre>"},{"location":"getting-started/architecture/#minimal-architecture-example","title":"\ud83e\uddea Minimal Architecture Example","text":"<p>Here\u2019s a minimal FletX app putting all the pieces together:</p> <pre><code># main.py\nfrom fletx.app import FletXApp\nfrom fletx.navigation import router_config\nfrom .pages.counter import CounterPage\n\nrouter_config.add_route(\"/\", CounterPage)\n\napp = FletXApp(title=\"Demo App\")\napp.run()\n</code></pre> <pre><code># pages/counter.py\nfrom fletx.core import FletXPage\nfrom .controllers.counter import CounterController\nfrom .components.reactive_text import MyReactiveText\nimport flet as ft\n\nclass CounterPage(FletXPage):\n    ctrl = CounterController()\n\n    def build(self):\n        return ft.Column([\n            MyReactiveText(rx_text=self.ctrl.count, size=40, weight=\"bold\"),\n            ft.ElevatedButton(\"Increment\", on_click=lambda e: self.ctrl.count.increment())\n        ])\n</code></pre> <pre><code># components/reactive_text.py\nimport flet as ft\nfrom fletx.decorators import simple_reactive\n\n@simple_reactive(bindings={'value': 'text'})\nclass MyReactiveText(ft.Text):\n\n    def __init__(self, rx_text: RxStr, **kwargs):\n        self.text: RxStr = rx_text\n        super().__init__(**kwargs)\n</code></pre> <pre><code># controllers/counter.py\nfrom fletx.core import FletXController, RxInt\n\nclass CounterController(FletXController):\n    def __init__(self):\n        self.count = RxInt(0)\n        super().__init__()\n</code></pre>"},{"location":"getting-started/architecture/#summary-table","title":"\u2705 Summary Table","text":"Component Responsibility <code>FletXPage</code> Builds the UI, binds to controller <code>FletXController</code> Holds business logic and reactive state <code>Rx*</code> objects Reactive state (trigger UI rebuilds) <code>router_config</code> Defines app navigation routes Services Shared utilities for APIs, storage, etc."},{"location":"getting-started/architecture/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Explore reactive UI binding</li> <li>Learn about the Architecture</li> <li>Dive into dependency injection</li> </ul>"},{"location":"getting-started/controllers/","title":"Controllers","text":""},{"location":"getting-started/controllers/#introduction","title":"\ud83d\udd30 Introduction","text":"<p>In FletX, the <code>FletXController</code> is the core unit for business logic and state management. It connects:</p> <ul> <li>The reactive UI components (Flet widgets turned reactive),</li> <li>The application state (data, events, and global contexts),</li> <li>The external services (APIs, databases, auth systems, etc.).</li> </ul> <p>The controller\u2019s goal is to separate business logic from UI logic, promoting a clean, testable, and reactive architecture.</p>"},{"location":"getting-started/controllers/#why-controllers","title":"\ud83e\udde9 Why Controllers?","text":"<p>Let\u2019s say you\u2019re building an application with:</p> <ul> <li>A login screen,</li> <li>A user dashboard,</li> <li>A shared todo system.</li> </ul> <p>Each of these views can have its own controller, which:</p> <ul> <li>Maintains local reactive variables,</li> <li>Responds to user interactions (clicks, input changes),</li> <li>Emits or listens to events across components,</li> <li>Shares or reads global context values (user info, theme),</li> <li>Manages side effects (notifications, redirections, loading states, etc.).</li> </ul>"},{"location":"getting-started/controllers/#controller-structure-overview","title":"\ud83c\udfd7\ufe0f Controller Structure Overview","text":"<pre><code>class MyController(FletXController):\n    def __init__(self):\n        super().__init__()\n\n        # Reactive states\n        self.username = self.create_rx_str(\"\")\n        self.is_loading = self.create_rx_bool(False)\n        self.error_message = self.create_rx_str(\"\")\n\n        # Reactive effect\n        self.use_effect(self.handle_username_change, deps=[self.username])\n\n    def handle_username_change(self):\n        print(f\"Username changed to: {self.username.value}\")\n\n    def on_ready(self):\n        print(\"Controller is ready!\")\n</code></pre>"},{"location":"getting-started/controllers/#1-built-in-reactive-variables","title":"\ud83e\udde0 1. Built-in Reactive Variables","text":"<p>Controllers offer convenient helpers to generate reactive variables that automatically clean up with the controller\u2019s lifecycle.</p> <pre><code># Create reactive values\nusername = controller.create_rx_str(\"John\")\nage = controller.create_rx_int(30)\nis_logged_in = controller.create_rx_bool(False)\ntasks = controller.create_rx_list([])\nprofile = controller.create_rx_dict({\"email\": \"john@example.com\"})\n</code></pre>"},{"location":"getting-started/controllers/#computed-properties","title":"\ud83d\udd01 Computed Properties","text":"<p>Computed properties are reactive values derived from other reactive variables:</p> <pre><code>full_info = controller.create_computed(\n    lambda: f\"{username.value} ({age.value} years old)\"\n)\n</code></pre> <p>These are automatically re-evaluated when their dependencies change.</p>"},{"location":"getting-started/controllers/#2-reactive-effects","title":"\ud83c\udfaf 2. Reactive Effects","text":"<p>You can attach reactive effects to the controller. These functions automatically execute when one or more reactive dependencies change:</p> <pre><code>controller.use_effect(\n    lambda: print(f\"Username is now: {username.value}\"),\n    deps=[username]\n)\n</code></pre> <p>These are useful for:</p> <ul> <li>Triggering API calls,</li> <li>Syncing values between views,</li> <li>Automatically persisting changes to storage, etc.</li> </ul>"},{"location":"getting-started/controllers/#3-built-in-reactive-state","title":"\ud83d\udd04 3. Built-in Reactive State","text":"<p>Each controller includes predefined states for common usage:</p> Property Description <code>is_loading</code> Indicates if a loading process is ongoing <code>error_message</code> Holds an error message to show in the UI <code>state</code> General purpose reactive state object <pre><code>controller.is_loading.listen(lambda: print(\"Loading...\"))\ncontroller.error_message.value = \"Invalid credentials\"\n</code></pre>"},{"location":"getting-started/controllers/#4-local-and-global-event-bus","title":"\ud83d\udce1 4. Local and Global Event Bus","text":"<p>Each controller includes a reactive Event Bus, allowing you to emit and listen to custom events, either:</p> <ul> <li>Locally (within the same controller instance),</li> <li>Or Globally (across all controllers in the app).</li> </ul>"},{"location":"getting-started/controllers/#emit-events","title":"\u2705 Emit Events","text":"<pre><code>controller.emit_local(\"user_updated\", {\"name\": \"Alice\"})\ncontroller.emit_global(\"theme_changed\", {\"dark_mode\": True})\n</code></pre>"},{"location":"getting-started/controllers/#listen-to-events","title":"\ud83c\udfa7 Listen to Events","text":"<pre><code>events = controller.listen_reactive_local(\"user_updated\")\nevents.listen(lambda: print(f\"User events: {len(events.value)}\"))\n\n# You can access:\nprint(controller.event_bus.event_history.value)\nprint(controller.event_bus.last_event.value)\n</code></pre>"},{"location":"getting-started/controllers/#5-local-and-global-context","title":"\ud83c\udf10 5. Local and Global Context","text":"<p>FletXController provides a reactive context system to store and share values:</p> <ul> <li>Between views (global),</li> <li>Within the current controller (local).</li> </ul>"},{"location":"getting-started/controllers/#set-context","title":"\ud83d\udce5 Set Context","text":"<pre><code>controller.set_context(\"current_user\", {\"id\": 1, \"name\": \"John\"})\n</code></pre>"},{"location":"getting-started/controllers/#get-context-reactively-or-not","title":"\ud83d\udce4 Get Context (reactively or not)","text":"<pre><code># Reactive version\nrx_user = controller.get_context_reactive(\"current_user\")\nrx_user.listen(lambda: print(f\"User updated: {rx_user.value}\"))\n\n# Reactive check\nhas_user = controller.has_context_reactive(\"current_user\")\nhas_user.listen(lambda: print(\"User exists\" if has_user.value else \"No user\"))\n\n# Non-reactive version\nuser = controller.get_context(\"current_user\")\n</code></pre> <p>This system helps decouple logic between parts of your app.</p>"},{"location":"getting-started/controllers/#6-lifecycle-hooks","title":"\u23f3 6. Lifecycle Hooks","text":"<p>FletXController includes three lifecycle hooks to help you run code at different stages:</p> <pre><code>class MyController(FletXController):\n\n    def on_initialized(self):\n        # Called during controller instantiation\n        print(\"Controller initialized\")\n\n    def on_ready(self):\n        # Called when UI is mounted and ready\n        print(\"Controller is ready\")\n\n    def on_disposed(self):\n        # Called when the controller is destroyed\n        print(\"Controller disposed\")\n</code></pre> <p>These hooks help with initialization logic, data fetching, or cleanup.</p>"},{"location":"getting-started/controllers/#full-example","title":"\ud83e\uddea Full Example","text":"<pre><code>class LoginController(FletXController):\n    def __init__(self):\n        super().__init__()\n        self.username = self.create_rx_str(\"\")\n        self.password = self.create_rx_str(\"\")\n        self.login_error = self.create_rx_str(\"\")\n\n    def on_ready(self):\n        self.username.listen(self.validate_form)\n        self.password.listen(self.validate_form)\n\n    def validate_form(self):\n        if self.username.value and self.password.value:\n            self.login_error.value = \"\"\n        else:\n            self.login_error.value = \"All fields are required\"\n</code></pre>"},{"location":"getting-started/controllers/#summary-table","title":"\ud83d\udcdd Summary Table","text":"Feature Description Reactive Variables Easy-to-create reactive values (<code>RxBool</code>, <code>RxStr</code>, etc.) Computed Values Derived state from other variables Reactive Effects Triggers logic when values change Event Bus Reactive local &amp; global events Context System Shared state (reactive) across or within controllers Built-in State Common states like <code>is_loading</code>, <code>error_message</code>, etc. Lifecycle Hooks <code>on_initialized</code>, <code>on_ready</code>, <code>on_disposed</code>"},{"location":"getting-started/controllers/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Explore Page (Views)</li> <li>Learn about the Architecture</li> <li>Dive into dependency injection</li> </ul>"},{"location":"getting-started/dependency-injection/","title":"\ud83d\udc89 Dependency Injection (DI) with <code>FletX</code>","text":"<p>FletX provides a lightweight and flexible manual dependency injection system, inspired by <code>GetX</code>. It allows you to register and retrieve singleton instances of your services, repositories, and other dependencies from anywhere in your app.</p>"},{"location":"getting-started/dependency-injection/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>All interactions with the DI container are done via the <code>FletX</code> class:</p> <pre><code>from fletx import FletX\n</code></pre> <p>This exposes the following methods:</p> Method Description <code>FletX.put(instance)</code> Registers a singleton instance <code>FletX.find(MyClass)</code> Retrieves the registered instance <code>FletX.delete(MyClass)</code> Removes an instance from the container <code>FletX.reset()</code> Clears the entire DI container"},{"location":"getting-started/dependency-injection/#registering-an-instance","title":"\u2705 Registering an Instance","text":"<pre><code>from fletx import FletX\n\nclass AuthService:\n    def __init__(self):\n        self.user = None\n\n    def login(self, username):\n        self.user = username\n\nFletX.put(AuthService())\n</code></pre> <p>This registers a singleton of <code>AuthService</code> that you can use throughout your app.</p>"},{"location":"getting-started/dependency-injection/#retrieving-an-instance","title":"\ud83d\udce6 Retrieving an Instance","text":"<pre><code>auth = FletX.find(AuthService)\nauth.login(\"johndoe\")\n</code></pre> <p>This retrieves the instance you registered with <code>FletX.put()</code>.</p>"},{"location":"getting-started/dependency-injection/#using-tags","title":"\ud83c\udff7 Using Tags","text":"<p>If you need multiple versions of the same class:</p> <pre><code>FletX.put(AuthService(), tag=\"admin\")\nFletX.put(AuthService(), tag=\"user\")\n\nadmin_auth = FletX.find(AuthService, tag=\"admin\")\nuser_auth = FletX.find(AuthService, tag=\"user\")\n</code></pre>"},{"location":"getting-started/dependency-injection/#deleting-and-resetting","title":"\ud83e\uddf9 Deleting and Resetting","text":"<pre><code>FletX.delete(AuthService)\nFletX.reset()\n</code></pre> <p><code>delete()</code> removes a single instance; <code>reset()</code> clears the entire container.</p>"},{"location":"getting-started/dependency-injection/#example-usage","title":"\ud83e\uddea Example Usage","text":""},{"location":"getting-started/dependency-injection/#step-1-register-your-service","title":"Step 1: Register your service","text":"<pre><code>FletX.put(AuthService())\n</code></pre>"},{"location":"getting-started/dependency-injection/#step-2-retrieve-and-use-it-in-your-view-route-or-controller","title":"Step 2: Retrieve and use it in your view, route, or controller","text":"<pre><code>class Dashboard:\n    def __init__(self):\n        self.auth = FletX.find(AuthService)\n\n    def do_stuff(self):\n       ...\n</code></pre>"},{"location":"getting-started/dependency-injection/#notes","title":"\u26a0\ufe0f Notes","text":"<ul> <li>\ud83e\udde0 FletX does not support automatic dependency resolution (e.g., constructor or function injection) yet.</li> <li>\ud83d\udca1 You must manually retrieve your dependencies using <code>FletX.find()</code>.</li> </ul>"},{"location":"getting-started/dependency-injection/#recap","title":"\ud83d\udcdd Recap","text":"Task Code Example Register a service <code>FletX.put(MyService())</code> Retrieve a service <code>FletX.find(MyService)</code> Register multiple <code>FletX.put(MyService(), tag=\"x\")</code> Retrieve with tag <code>FletX.find(MyService, tag=\"x\")</code> Remove a service <code>FletX.delete(MyService)</code> Clear all services <code>FletX.reset()</code>"},{"location":"getting-started/dependency-injection/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Explore sevices</li> <li>Dive into routing</li> <li>Learn about the Architecture</li> </ul>"},{"location":"getting-started/fletx-cli/","title":"FletX CLI","text":""},{"location":"getting-started/fletx-cli/#introduction","title":"Introduction","text":"<p>The FletX CLI (<code>fletx</code>) is a command-line tool that makes it easy to manage FletX projects. It lets you:</p> <ul> <li>Create a new FletX project</li> <li>Generate components (controllers, services, pages, etc.)</li> <li>Run your project with various options</li> </ul>"},{"location":"getting-started/fletx-cli/#main-command","title":"Main command","text":"<pre><code>fletx &lt;command&gt; [options]\n</code></pre>"},{"location":"getting-started/fletx-cli/#available-commands","title":"Available commands","text":"Category Command Description Project Management <code>new</code> Create a new FletX project from template Code Generation <code>generate</code> Generate components like controllers, services, etc. Utilities <code>run</code> Run a FletX project with various options Testing <code>test</code> Run tests for your FletX project <p>\ud83d\udc49 Specific help :</p> <pre><code>fletx &lt;command&gt; --help\nfletx help &lt;command&gt;\n</code></pre>"},{"location":"getting-started/fletx-cli/#fletx-new","title":"<code>fletx new</code>","text":"<p>Create a new FletX project.</p> <pre><code>fletx new &lt;project_name&gt; [options]\n</code></pre>"},{"location":"getting-started/fletx-cli/#options","title":"Options","text":"Option Description Default <code>--template TEMPLATE</code> Template to use for the project <code>project</code> <code>--directory DIRECTORY</code> Directory where the project will be created current directory <code>--author AUTHOR</code> Author name for the project <code>--description DESCRIPTION</code> Project description <code>--version VERSION</code> Initial version of the project <code>0.1.0</code> <code>--python-version PYTHON_VERSION</code> Minimum required Python version <code>3.12</code> <code>--overwrite</code> Overwrite existing files if they exist <code>--no-install</code> Don't install dependencies after creating the project"},{"location":"getting-started/fletx-cli/#fletx-generate","title":"<code>fletx generate</code>","text":"<p>Generate a component for your project.</p> <pre><code>fletx generate &lt;type&gt; &lt;name&gt; [options]\n</code></pre> <p>where <code>&lt;type&gt;</code> can be: <code>controller</code>, <code>service</code>, <code>model</code>, <code>component</code>, <code>page</code></p>"},{"location":"getting-started/fletx-cli/#options_1","title":"Options","text":"Option Description Default <code>--output-dir OUTPUT_DIR</code> Output directory based on type <code>--template TEMPLATE</code> Specific template to use based on type <code>--overwrite</code> Overwrite existing files <code>--with-test</code> Generate a test file for the component"},{"location":"getting-started/fletx-cli/#fletx-run","title":"<code>fletx run</code>","text":"<p>Run your FletX project.</p> <pre><code>fletx run [target] [options]\n</code></pre> <p>where <code>target</code> is the Python file to run (default: <code>main.py</code>)</p>"},{"location":"getting-started/fletx-cli/#options_2","title":"Options","text":"Option Description Default <code>--host HOST</code> Host to bind to <code>localhost</code> <code>--port PORT</code> Port to bind to <code>8550</code> <code>--debug</code> Run in debug mode <code>--watch</code> Enable hot reload (directory watch) <code>--web</code> Open in a web browser <code>--desktop</code> Force desktop mode <code>--android</code> Open on an Android device <code>--ios</code> Open on an iOS device <code>--assets-dir ASSETS_DIR</code> Path to assets directory <code>--ignore-dir IGNORE_DIR</code> Path to ignore directory <code>--env ENV</code> Environment variables <code>KEY=VALUE</code> <code>--requirements REQUIREMENTS</code> Path to <code>requirements.txt</code> file <code>--install-deps</code> Install dependencies before running <code>--verbose</code> Verbose output"},{"location":"getting-started/fletx-cli/#example-create-and-run","title":"Example: Create and run","text":"<pre><code># Create a project\nfletx new my_project --author \"John Doe\" --description \"My FletX app\"\n\n# Generate a controller\nfletx generate controller MyController --with-test\n\n# Run the project\nfletx run --web --debug\n</code></pre>"},{"location":"getting-started/fletx-cli/#fletx-test","title":"<code>fletx test</code>","text":"<p>Run tests for your FletX project.</p> <pre><code>fletx test [options]\n</code></pre>"},{"location":"getting-started/fletx-cli/#examples","title":"Examples","text":"<pre><code>fletx test                      # Run all tests\nfletx test ./tests/test_api.py  # Run a specific test file\nfletx test -k \"MyTestClass\"     # Run tests matching a keyword\nfletx test -v                   # Verbose output\nfletx test --coverage           # Run tests with coverage report\nfletx test --pdb                # Debug on test failure\n</code></pre>"},{"location":"getting-started/fletx-cli/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Learn about the Architecture</li> <li>Explore reactive UI binding</li> <li>Dive into dependency injection</li> </ul>"},{"location":"getting-started/installation/","title":"\ud83d\ude80 Getting Started with FletX","text":"<p>Welcome to the official getting started guide for FletX \u2014 the reactive and modular application architecture for Flet in Python.</p> <p>This guide will walk you through:</p> <ul> <li>Installation</li> <li>Creating your first FletX app</li> <li>Directory structure</li> </ul>"},{"location":"getting-started/installation/#prerequisites","title":"\ud83e\uddf1 Prerequisites","text":"<p>Before starting, make sure you have:</p> <ul> <li>Python 3.12</li> <li><code>pip</code> (Python package manager)</li> </ul>"},{"location":"getting-started/installation/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install flet fletxr\n</code></pre> <p>\u2705 This will install both Flet and FletX. <code>fletxr</code> is the official package name on PyPI.</p>"},{"location":"getting-started/installation/#creating-your-first-app","title":"\ud83e\uddea Creating Your First App","text":"<p>You can either start manually or use the FletX CLI. Let\u2019s explore both options:</p>"},{"location":"getting-started/installation/#option-1-manual-setup","title":"Option 1: Manual Setup","text":"<p>Create a file <code>main.py</code>:</p> <pre><code>import flet as ft\n\nfrom fletx.app import FletXApp\nfrom fletx.core import (\n    FletXPage, FletXController, RxInt, RxStr\n)\nfrom fletx.navigation import router_config\nfrom fletx.decorators import (\n    simple_reactive\n)\n\n\nclass CounterController(FletXController):\n\n    def __init__(self):\n        self.count = RxInt(0)\n        super().__init__()\n\n\n@simple_reactive(bindings={'value': 'text'})\nclass MyReactiveText(ft.Text):\n\n    def __init__(self, rx_text: RxStr, **kwargs):\n        self.text: RxStr = rx_text\n        super().__init__(**kwargs)\n\n\nclass CounterPage(FletXPage):\n    ctrl = CounterController()\n\n    def build(self):\n        return ft.Column(\n            controls=[\n                MyReactiveText(rx_text=self.ctrl.count, size=200, weight=\"bold\"),\n                ft.ElevatedButton(\n                    \"Increment\",\n                    on_click=lambda e: self.ctrl.count.increment()\n                )\n            ]\n        )\n\n\ndef main():\n    router_config.add_route(path='/', component=CounterPage)\n    app = FletXApp(\n        title=\"My Counter\",\n        initial_route=\"/\",\n        debug=True\n    ).with_window_size(400, 600).with_theme(\n        ft.Theme(color_scheme_seed=ft.Colors.BLUE)\n    )\n\n    app.run()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Run the app:</p> <pre><code># Standard way\npython main.py\n\n# Or using flet\nflet run main.py\n</code></pre>"},{"location":"getting-started/installation/#option-2-using-the-cli","title":"Option 2: Using the CLI","text":"<p>Use the FletX CLI to scaffold a new project:</p> <pre><code>fletx new my_app\n\n# Navigate into the project folder\ncd my_app\n\n# Run the project\nfletx run \n</code></pre>"},{"location":"getting-started/installation/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>my_project/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 controllers/     # Business logic controllers\n\u2502   \u251c\u2500\u2500 services/       # Business services and API calls\n\u2502   \u251c\u2500\u2500 models/         # Data models\n\u2502   \u251c\u2500\u2500 components/     # Reusable widgets\n\u2502   \u251c\u2500\u2500 pages/          # Application pages\n\u2502   \u2514\u2500\u2500 routes.py       # App routing modules\n\u251c\u2500\u2500 assets/             # Static assets (images, fonts, etc.)\n\u251c\u2500\u2500 tests/              # Test files\n\u251c\u2500\u2500 .python-version     # Python version\n\u251c\u2500\u2500 pyproject.toml      # Python dependencies\n\u251c\u2500\u2500 README.md           # Quick start README\n\u2514\u2500\u2500 main.py            # Application entry point\n</code></pre>"},{"location":"getting-started/installation/#example-create-and-run","title":"Example: Create and run","text":"<pre><code># Create a project\nfletx new my_project --author \"John Doe\" --description \"My FletX app\"\n\n# Generate a controller\nfletx generate controller MyController --with-test\n\n# Run the project\nfletx run --web --debug\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Learn about the FletX CLI</li> <li>Explore reactive UI binding</li> <li>Dive into dependency injection</li> </ul> <p>FletX makes architecture clean \u2014 so you can focus on building features, not structure.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"getting-started/pages/","title":"Using Pages in FletX","text":""},{"location":"getting-started/pages/#what-is-a-fletxpage","title":"\ud83d\udd37 What is a <code>FletXPage</code>?","text":"<p>A <code>FletXPage</code> represents a single screen or view in a FletX application. It is the fundamental building block of the user interface and typically corresponds to a page the user navigates to.</p> <p>Each page is designed to:</p> <ul> <li>Define its UI layout using a <code>build()</code> method</li> <li>Respond to lifecycle events (<code>on_init</code>, <code>on_destroy</code>)</li> <li>React to state changes and side effects</li> <li>Add contextual keyboard shortcuts</li> <li>Interact with controllers using reactive data listening</li> </ul>"},{"location":"getting-started/pages/#page-lifecycle-in-fletx","title":"\ud83d\udd01 Page Lifecycle in FletX","text":"<p>FletXPages go through a structured lifecycle, with each state representing a phase in the page\u2019s existence. Understanding these states is crucial to managing page behavior correctly.</p> State Description <code>INITIALIZING</code> The page is being initialized but not yet visible <code>MOUNTED</code> The page has been mounted in the UI, but might not be active <code>ACTIVE</code> The page is fully visible and has focus (can respond to input) <code>INACTIVE</code> The page is still mounted but currently inactive (e.g., another page is active) <code>UNMOUNTING</code> The page is about to be removed from the UI <code>DISPOSED</code> The page has been destroyed and its resources cleaned up"},{"location":"getting-started/pages/#lifecycle-hook-methods","title":"\ud83e\udde9 Lifecycle Hook Methods","text":"<p>FletXPages provide lifecycle hooks that allow you to define behaviors when the page appears or disappears.</p>"},{"location":"getting-started/pages/#on_initself","title":"<code>on_init(self)</code>","text":"<p>This method is called before the page becomes visible. You should use it to:</p> <ul> <li>Initialize or fetch data</li> <li>Subscribe to signals from controllers</li> <li>Set up any one-time effects or listeners</li> </ul>"},{"location":"getting-started/pages/#on_destroyself","title":"<code>on_destroy(self)</code>","text":"<p>This method is called just before the page is unmounted and destroyed. It\u2019s useful to:</p> <ul> <li>Unsubscribe from observers</li> <li>Cancel background tasks</li> <li>Clear resources</li> </ul> <p>These methods give you control over the page's initialization and teardown logic.</p>"},{"location":"getting-started/pages/#the-build-method-defining-the-ui","title":"\ud83d\udee0\ufe0f The <code>build()</code> Method \u2013 Defining the UI","text":"<p>Every <code>FletXPage</code> must define a <code>build()</code> method. This method returns the actual content of the page using Flet UI elements.</p> <pre><code>def build(self):\n    return ft.Column([\n        ft.Text(\"Page Title\"),\n        ft.ElevatedButton(\"Click Me\", on_click=self.handle_click)\n    ])\n</code></pre> <p>This method is automatically called when the page is rendered. It should be fast, pure, and declarative.</p>"},{"location":"getting-started/pages/#handling-side-effects-with-effectmanager","title":"\ud83c\udfaf Handling Side Effects with <code>EffectManager</code>","text":"<p>FletX provides a built-in effect manager to help you manage reactive side effects. These are actions triggered by changes in observable data or controller state.</p> <p>You can add effects using listeners:</p> <pre><code># React to loading state\nself.controller.is_loading.listen(self.show_loader)\n\n# React to controller readiness\nself.controller.is_ready.listen(self.load_data)\n</code></pre> <p>These effects are automatically cleaned up when the page is destroyed, making them safe and maintainable.</p>"},{"location":"getting-started/pages/#adding-keyboard-shortcuts","title":"\u2328\ufe0f Adding Keyboard Shortcuts","text":"<p>You can enable contextual keyboard shortcuts on a FletXPage by passing <code>enable_keyboard_shortcuts=True</code> in the constructor.</p> <pre><code>self.add_keyboard_shortcut(\"ctrl+r\", self.refresh, \"Refresh the page\")\nself.add_keyboard_shortcut(\"ctrl+h\", self.go_home, \"Navigate home\")\n</code></pre> <p>\u26a0\ufe0f Shortcuts are only active when the page is in <code>MOUNTED</code> or <code>ACTIVE</code> state.</p> <p>This feature improves productivity and accessibility for power users.</p>"},{"location":"getting-started/pages/#interacting-with-controllers","title":"\ud83d\udd17 Interacting with Controllers","text":"<p>A <code>FletXPage</code> can work with controllers to handle complex logic or manage data. Pages can:</p> <ul> <li>Observe reactive properties from the controller</li> <li>Listen to loading or error states</li> <li>Call controller methods to fetch or mutate data</li> </ul> <pre><code># Subscribe to reactive controller states\nself.controller = HomeController()\nself.controller.is_loading.listen(self.show_loader)\nself.controller.error_message.listen(self.show_error)\n</code></pre> <p>This ensures your page stays in sync with the application logic and state.</p>"},{"location":"getting-started/pages/#complete-example-of-a-fletxpage","title":"\u2705 Complete Example of a <code>FletXPage</code>","text":"<pre><code>class HomePage(FletXPage):\n    def __init__(self):\n        super().__init__(\n            padding=20,\n            bgcolor=ft.colors.BLUE_GREY_50,\n            border_radius=10,\n            enable_keyboard_shortcuts=True\n        )\n\n\n        # Register keyboard shortcuts\n        self.add_keyboard_shortcut(\"ctrl+r\", self.refresh, \"Refresh the page\")\n        self.add_keyboard_shortcut(\"ctrl+h\", lambda: navigate('/home'), \"Go to home page\")\n\n        # Inject HomeController\n        self.controller = FletX.put(HomeController(),'home_conroller')\n        # Connect to controller and listen for state changes\n        self.controller.is_loading.listen(self.show_loader)\n\n    def on_init(self):\n        # Trigger actions when the page is initialized\n        self.controller.load_data()\n        self.controller.error_message.listen(self.show_snackbar)\n\n    def on_destroy(self):\n        print(\"HomePage is being destroyed...\")\n\n    def build(self):\n        return ft.Column([\n            ft.Text(\"Welcome to FletX!\", size=24),\n            ft.ElevatedButton(\"Show Dialog\", on_click=self.show_sample_dialog),\n            ft.ElevatedButton(\"Show Snackbar\", on_click=self.show_snackbar)\n        ])\n\n    def refresh(self, _=None):\n        self.controller.load_data()\n\n    def go_home(self, _=None):\n        self.router.go(\"/home\")\n\n    def show_sample_dialog(self, _=None):\n        ...\n\n    def show_snackbar(self, _=None):\n        ...\n\n    def show_loader(self, is_loading):\n        if is_loading:\n            ...\n</code></pre>"},{"location":"getting-started/pages/#summary-table","title":"\ud83d\udccc Summary Table","text":"Feature Purpose <code>on_init</code> / <code>on_destroy</code> Handle page initialization and cleanup <code>build()</code> Define the UI layout using Flet widgets <code>add_keyboard_shortcut()</code> Add contextual keyboard actions <code>controller.listen(...)</code> React to observable changes from controllers <code>EffectManager</code> Manage side effects in a structured and safe way"},{"location":"getting-started/pages/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Explore the Routing System</li> <li>Learn about the Architecture</li> <li>Dive into dependency injection</li> </ul>"},{"location":"getting-started/routing/","title":"\ud83d\udccd Routing","text":"<p>FletX features a modern, declarative routing system inspired by Angular and Vue Router. It enables developers to organize their application navigation cleanly\u2014supporting static and dynamic routes, nested paths, modular routing, page transitions, route guards, and middleware.</p> <p>FletX also provides utility functions for programmatic navigation, such as <code>navigate()</code> and <code>go_back()</code>.</p>"},{"location":"getting-started/routing/#basic-routing","title":"\ud83e\udded Basic Routing","text":"<p>Use the global <code>router_config</code> to define your app's navigation structure:</p> <pre><code>from fletx.navigation import router_config\n\n# Define simple static routes\nrouter_config.add_routes([\n    {\"path\": \"/\", \"component\": HomePage},          # Main entry point\n    {\"path\": \"/settings\", \"component\": SettingsPage}  # Static settings page\n])\n</code></pre> <p>\ud83e\udde0 These are the core pages accessible via <code>/</code> and <code>/settings</code>. The <code>component</code> can be any valid FletX view class.</p>"},{"location":"getting-started/routing/#dynamic-routing-with-parameters","title":"\ud83e\udde9 Dynamic Routing with Parameters","text":"<p>FletX allows dynamic segments using <code>:param</code> and <code>*param</code> (wildcard):</p> <pre><code>router_config.add_routes([\n    {\n        \"path\": \"/users/:id\",  # :id is dynamic (e.g. /users/42)\n        \"component\": UserDetailPage\n    },\n    {\n        \"path\": \"/products/*category\",  # Matches /products/electronics/phones\n        \"component\": ProductsPage\n    }\n])\n</code></pre> <p>\ud83d\udce6 <code>route.params</code> gives access to dynamic values extracted from the URL.</p>"},{"location":"getting-started/routing/#nested-routing-hierarchical","title":"\ud83e\ude9c Nested Routing (Hierarchical)","text":"<p>You can structure your routes with a parent-child hierarchy using <code>children</code>:</p> <pre><code>from fletx.navigation import RouteDefinition\n\n# Admin layout with nested pages\nrouter_config.add_route(\n    path=\"/admin\",\n    component=AdminLayoutPage,  # Base layout\n    children=[\n        RouteDefinition(path=\"/dashboard\", component=AdminDashboardPage),\n        RouteDefinition(path=\"/users\", component=AdminUsersPage)\n    ]\n)\n</code></pre> <p>\ud83e\uddf1 This allows child components to render inside the parent layout, just like <code>&lt;router-outlet&gt;</code> in Angular.</p>"},{"location":"getting-started/routing/#modular-routing-with-modulerouter","title":"\ud83e\uddf1 Modular Routing with <code>ModuleRouter</code>","text":"<p>For large apps, splitting routing logic by modules keeps your code maintainable.</p>"},{"location":"getting-started/routing/#example-1-manual-modulerouter-registration","title":"\ud83d\udd39 Example 1: Manual <code>ModuleRouter</code> registration","text":"<pre><code>admin_module = ModuleRouter()\nadmin_module.name = \"admin\"\n\nadmin_module.add_routes([\n    {\"path\": \"/\", \"component\": AdminHomePage},\n    {\"path\": \"/users\", \"component\": AdminUsersPage},\n    {\"path\": \"/settings\", \"component\": AdminSettingsPage}\n])\n\n# Mount admin module under the /admin path\nrouter_config.add_module_routes(\"/admin\", admin_module)\n</code></pre> <p>\ud83d\ude80 This creates modular routes like <code>/admin/users</code>.</p>"},{"location":"getting-started/routing/#example-2-angular-style-with-register_router","title":"\ud83d\udd39 Example 2: Angular-style with <code>@register_router</code>","text":"<pre><code># Define the routes for the Admin module\nadmin_routes = [\n    {\"path\": \"/\", \"component\": AdminHomePage},\n    {\"path\": \"/users\", \"component\": AdminUsersPage},\n    {\"path\": \"/settings\", \"component\": AdminSettingsPage}\n]\n\n# Register the admin router\n@register_router\nclass AdminRouter(ModuleRouter):\n    name = 'Admin'\n    base_path = '/admin'\n    is_root = False\n    routes = admin_routes\n    sub_routers = []\n\n# Declare the root router and include AdminRouter\n@register_router\nclass MyAppRouter(ModuleRouter):\n    name = 'MyAppRouter'\n    base_path = '/'\n    is_root = True\n    routes = []\n    sub_routers = [AdminRouter]\n</code></pre> <p>\ud83e\udde9 This structure is powerful for enterprise-scale applications and module separation.</p>"},{"location":"getting-started/routing/#page-transitions","title":"\ud83c\udfad Page Transitions","text":"<p>FletX supports animated transitions between pages using <code>RouteTransition</code>:</p> <pre><code>from fletx.navigation import RouteTransition, TransitionType\n\nroutes = [\n    {\n        \"path\": \"/login\",\n        \"component\": LoginPage,\n        \"meta\": {\n            \"transition\": RouteTransition(\n                transition_type=TransitionType.ZOOM_IN,  # Zoom animation\n                duration=350  # In milliseconds\n            )\n        }\n    },\n    {\n        \"path\": \"/dashboard\",\n        \"component\": DashboardHomePage,\n        \"meta\": {\n            \"transition\": RouteTransition(\n                transition_type=TransitionType.FLIP_HORIZONTAL,\n                duration=350\n            )\n        }\n    }\n]\n</code></pre> <p>\ud83c\udf08 Page transitions help enhance user experience and feedback during navigation.</p>"},{"location":"getting-started/routing/#route-guards-middleware","title":"\ud83d\udee1\ufe0f Route Guards &amp; Middleware","text":"<p>FletX supports guards (for route protection) and middleware (for navigation hooks).</p>"},{"location":"getting-started/routing/#auth-guard-example","title":"\ud83d\udd10 Auth Guard Example","text":"<pre><code>from fletx.navigation import RouteGuard\n\nclass AuthGuard(RouteGuard):\n    \"\"\"Blocks access if the user is not authenticated.\"\"\"\n\n    def __init__(self, auth_service, login_route=\"/login\"):\n        self.auth_service = auth_service\n        self.login_route = login_route\n\n    def can_activate(self, route_info):\n        return self.auth_service()\n\n    def redirect_to(self, route_info):\n        return f\"{self.login_route}?returnUrl={route_info.path}\"\n</code></pre> <p>\u2705 <code>can_activate()</code> checks before entering a route. \ud83d\udd01 <code>redirect_to()</code> defines where to redirect if access is denied.</p>"},{"location":"getting-started/routing/#middleware-example-eg-loading-state","title":"\ud83d\udcca Middleware Example (e.g., loading state)","text":"<pre><code>from fletx.navigation import RouteMiddleware\n\nclass LoadingMiddleware(RouteMiddleware):\n    \"\"\"Shows a loading indicator during navigation.\"\"\"\n\n    def __init__(self, loading_service):\n        self.loading_service = loading_service\n\n    def before_navigation(self, from_route, to_route):\n        self.loading_service.show_loading(f\"Loading {to_route.path}...\")\n\n    def after_navigation(self, route_info):\n        self.loading_service.hide_loading()\n\n    def on_navigation_error(self, error, route_info):\n        self.loading_service.hide_loading()\n</code></pre> <p>\ud83d\udca1 Middleware can be used for analytics, logging, or animations.</p>"},{"location":"getting-started/routing/#using-guards-and-middleware-in-routes","title":"\ud83e\uddea Using Guards and Middleware in routes","text":"<pre><code>router_config.add_route(\n    path=\"/profile\",\n    component=ProfilePage,\n    guards=[AuthGuard()],                # Check if user is authenticated\n    middleware=[LoadingMiddleware()]    # Show loading screen during transition\n)\n</code></pre>"},{"location":"getting-started/routing/#programmatic-navigation","title":"\ud83d\udd01 Programmatic Navigation","text":"<p>Use <code>navigate()</code> to switch routes and <code>go_back()</code> to return to the previous one.</p> <pre><code>from fletx.navigation import navigate, go_back\n\n# Navigate to a static or dynamic page\nnavigate(\"/home\")\nnavigate(\"/users/23\")\n\n# Pass additional data\nnavigate(\"/dashboard\", data={\"user_id\": 23})\n\n# Replace the current page or reset navigation stack\nnavigate(\"/dashboard\", replace=True, clear_history=True)\n\n# Navigate back (like a browser back button)\ngo_back()\n</code></pre> <p>\ud83d\udd00 Useful for navigation after login, form submissions, etc.</p>"},{"location":"getting-started/routing/#summary","title":"Summary","text":"Feature Description <code>add_routes()</code> Define simple or dynamic routes <code>ModuleRouter</code> Organize routes by feature/module <code>@register_router</code> Angular-style modular declaration <code>RouteGuard</code> Protect pages (e.g., login required) <code>RouteMiddleware</code> Run code before/after navigation <code>RouteTransition</code> Add animation to route changes <code>navigate()</code> Programmatic navigation <code>go_back()</code> Navigate to the previous route"},{"location":"getting-started/routing/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Dive into dependency injection</li> <li>Explore the sevices</li> <li>Learn about the Architecture</li> </ul>"},{"location":"getting-started/services/","title":"Services","text":""},{"location":"getting-started/services/#fletx-services","title":"FletX - Services","text":""},{"location":"getting-started/services/#overview","title":"Overview","text":"<p>FletX services are optional components used to offload responsibilities from controllers, especially when interacting with external systems like APIs, databases, hardware, or other services.</p> <p>\ud83d\udd38 Business logic can still be implemented directly in controllers. Services are designed to improve separation of concerns, keep controllers lightweight, and make the codebase easier to test and maintain.</p>"},{"location":"getting-started/services/#integrated-http-client","title":"\ud83d\udd0c Integrated HTTP Client","text":"<p>Every service includes an HTTP client (<code>http_client</code>) that simplifies remote requests.</p> <pre><code>from fletx.core import HTTPClient, FletXService\n\nclass UserAPIService(FletXService):\n    def __init__(self):\n        super().__init__(http_client=HTTPClient(\"https://api.example.com\"))\n\n    def get_users(self):\n        return self.http_client.get(\"/users\").json()\n</code></pre>"},{"location":"getting-started/services/#service-lifecycle","title":"\ud83d\udd04 Service Lifecycle","text":"<p>You can override the following lifecycle methods in your service class:</p> Method Description <code>on_start()</code> Called when the service starts <code>on_start_async()</code> Async version <code>on_ready()</code> Called when the service is ready <code>on_stop()</code> Called when stopping the service <code>on_stop_async()</code> Async version <code>on_dispose()</code> Called during final cleanup <code>on_state_changed()</code> Called when the internal state changes <code>on_error(error)</code> Triggered when an error occurs <p>Use these hooks to handle service-specific behavior when needed.</p>"},{"location":"getting-started/services/#service-states","title":"\ud83d\udea6 Service States","text":"<p>A FletX service can be in one of the following states:</p> <ul> <li><code>IDLE</code>: Initial state</li> <li><code>LOADING</code>: A task is running</li> <li><code>READY</code>: Service is ready to be used</li> <li><code>ERROR</code>: An error occurred</li> <li><code>DISPOSED</code>: Service has been disposed from memory</li> </ul> <p>Check <code>self.state</code> to access the current status.</p>"},{"location":"getting-started/services/#control-methods","title":"\u2699\ufe0f Control Methods","text":"Method Description <code>start()</code> Starts the service <code>start_async()</code> Async version <code>stop()</code> Stops the service <code>stop_async()</code> Async version <code>restart()</code> Restarts the service <code>restart_async()</code> Async version"},{"location":"getting-started/services/#full-example","title":"\ud83e\uddea Full Example","text":"<pre><code>from fletx.core import HTTPClient, FletXService\n\nclass UserAPIService(FletXService):\n    def __init__(self):\n        super().__init__(http_client=HTTPClient(\"https://api.example.com\"))\n\n    def on_ready(self):\n        print(\"UserAPIService is ready!\")\n\n    def get_users(self):\n        try:\n            return self.http_client.get(\"/users\").json()\n        except Exception as e:\n            self.set_error(e)\n</code></pre> <ul> <li>Dive into dependency injection</li> <li>Explore Controllers</li> <li>Learn about the Architecture</li> </ul>"},{"location":"getting-started/state-management/","title":"State Management","text":""},{"location":"getting-started/state-management/#reactivity-reactive-objects-in-fletx","title":"Reactivity &amp; Reactive Objects in FletX","text":"<p>Reactivity is a core pillar of the FletX framework. It enables building apps where the UI and behavior automatically adapt when data changes \u2014 with no need for manually propagating state or triggering refreshes.</p>"},{"location":"getting-started/state-management/#why-reactivity-matters","title":"\ud83d\udd04 Why reactivity matters","text":"<p>In most frameworks, when a value changes (e.g. a user logs in), you need to manually update the UI, synchronize the state, or refresh components.</p> <p>FletX eliminates all of that. It builds tight bindings between your data and your UI/logic, so everything stays in sync, automatically.</p> <p>This leads to:</p> <ul> <li>Cleaner code, fewer bugs</li> <li>Better separation of concerns</li> <li>Faster development</li> <li>A more responsive user experience</li> </ul>"},{"location":"getting-started/state-management/#what-is-a-reactive-object","title":"\ud83d\udd04 What is a reactive object?","text":"<p>A reactive object is an observable variable that can be watched. When its value changes, everything depending on it (UI elements, logic, services, navigation, etc.) gets automatically updated or notified.</p> <p>You can use it to:</p> <ul> <li>Refresh widgets</li> <li>Trigger API calls</li> <li>Display alerts</li> <li>Change pages or views</li> <li>Execute custom business logic</li> </ul>"},{"location":"getting-started/state-management/#built-in-reactive-types","title":"\ud83d\udce6 Built-in reactive types","text":"Type Description <code>RxInt</code> Reactive integer <code>RxStr</code> Reactive string <code>RxBool</code> Reactive boolean <code>RxList</code> Reactive list <code>RxDict</code> Reactive dictionary <code>Reactive[T]</code> Custom reactive object <p>Example 1 <pre><code>from fletx.core import RxInt, Reactive\n\n# Simple reactive int\ncounter = RxInt(0)\ncounter.increment()\n\n# Custom reactive object\nclass User:\n    def __init__(self, name):\n        self.name = name\n\nrx_user = Reactive(User(\"Henri\"))\nrx_user.value = (User(\"Sarah\"))\n</code></pre></p> <p>Example 2 <pre><code>from fletx.core import RxInt\n\ncounter = RxInt(0)\n\ncounter.listen(lambda v: print(\"New value:\", v))\n\ncounter.increment()  # Prints: New value: 1\n</code></pre></p> <p>Example 3 <pre><code>rx_user = Reactive(User(\"Luc\"))\n\nrx_user.listen(lambda u: print(f\"User changed to: {u.name}\"))\n\nrx_user.value = User(\"Sarah\")  # Prints: User changed to: Sarah\n</code></pre></p>"},{"location":"getting-started/state-management/#ui-reactivity-with-fletx-decorators","title":"\u2699\ufe0f UI Reactivity with FletX Decorators","text":"<p>One of the core pillars of FletX is its reactive widget system, built directly on top of Flet's native controls, thanks to powerful decorators like <code>@simple_reactive</code>, <code>@reactive_form</code>, etc..</p>"},{"location":"getting-started/state-management/#how-does-it-work","title":"\ud83c\udfaf How does it work?","text":"<p>When you decorate a class that extends a Flet control using <code>@simple_reactive</code>:</p> <ul> <li>It creates a binding between Flet\u2019s properties (like <code>text</code>, <code>value</code>, <code>disabled</code>) and reactive objects like <code>RxStr</code>, <code>RxBool</code>, etc.</li> <li>It listens to those reactive variables and automatically updates the widget whenever they change.</li> </ul>"},{"location":"getting-started/state-management/#example-1-creating-a-custom-reactive-widgets","title":"\u2705 Example 1 \u2013 Creating a custom reactive widgets","text":"<pre><code>@simple_reactive(\n    bindings={\n        'value': 'text'  # binds self.value() to the Flet Text's .text property\n    }\n)\nclass MyReactiveText(ft.Text):\n    def __init__(self, value: RxStr, **kwargs):\n        self.value: RxStr = value\n        super().__init__(**kwargs)\n\n\n@two_way_reactive({             # Enables two way binding allowing ui to change \n    'value': 'rx_value',        # reactive object's value \n    'visible': 'rx_visible',    # (like Angular two way data binding system)\n    'disabled': 'rx_disabled'   # value &lt;--&gt; rx_value\n})\nclass ReactiveTextField(TextField):\n    \"\"\"Example of two way Reactive TextField\"\"\"\n\n    def __init__(\n        self, \n        rx_value: RxStr = RxStr(\"\"), \n        rx_visible: RxBool = RxBool(True),\n        rx_disabled: RxBool = RxBool(False),\n        **kwargs\n    ):\n        # Define reactive properties\n        self.rx_value = rx_value\n        self.rx_visible = rx_visible\n        self.rx_disabled = rx_disabled\n\n        super().__init__(**kwargs)\n</code></pre> <p>usage in a page</p> <pre><code>class MyPage(FletXPage):\n    def build(self):\n        self.counter = RxInt(0)\n\n        return ft.Column([\n            ft.ElevatedButton(\"Increment\", on_click=lambda _: self.counter.increment()),\n            MyReactiveText(value=self.counter)\n        ])\n</code></pre> <p>The text content updates automatically each time the counter changes \u2014 no manual update() needed.</p>"},{"location":"getting-started/state-management/#example-2-reactive-forms","title":"\u2705 Example 2 \u2013 Reactive forms","text":"<pre><code>@reactive_form(\n    form_fields={\n        'email': 'rx_email',\n        'password': 'rx_password',\n    },\n    validation_rules={\n        'email': 'email_regex',         # Will call self.email_regex with email input value\n        'password': 'validate_pass',    # Will call self.validate_pass with password input value\n    },\n    on_submit = 'perform_submit',  \n    on_submit_failed = 'show_erros',\n    auto_validate = True\n)\nclass RegistrationForm(Column):\n    \"\"\"Example of Reactive Form\"\"\"\n\n    def __init__(self):\n        # Reactive Properties\n        self.rx_email = RxStr(\"\")\n        self.rx_password = RxStr(\"\")\n\n        super().__init__(spacing=10)\n\n    def validate_pass(self,value:str) -&gt; bool:\n        \"\"\"Example of password validation function\"\"\"\n        return True\n\n    def email_regex(self,value):\n        \"\"\"example of email validation function\"\"\"\n        import re\n        pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n        return re.match(pattern, value) is not None\n\n    def _build_form(self):\n        \"\"\"Build form Controls.\"\"\"\n\n        self.controls = [\n            Text(\"Login Form\", size = 24, weight = FontWeight.BOLD),\n\n            ReactiveTextField(\n                label = \"Your email\",\n                rx_value = self.rx_email\n            ),\n\n            ReactiveTextField(\n                label = \"password\",\n                password = True,\n                rx_value = self.rx_password\n            ),\n            ElevatedButton(\n                text = \"Register for free\",\n                on_click = lambda _: self.submit(),\n                disabled = lambda: not self.rx_is_valid.value\n            ),\n\n        ]\n</code></pre>"},{"location":"getting-started/state-management/#side-effects-and-logic-triggers","title":"\ud83c\udfaf Side-effects and logic triggers","text":"<p>Reactive objects can also trigger non-UI behaviors:</p> <pre><code>self.ctrl.logged_in.listen(lambda value: navigate('/home') if value else None)\n</code></pre> <ul> <li>Service calls</li> <li>Conditional business logic</li> <li>etc..</li> </ul>"},{"location":"getting-started/state-management/#targeted-reactivity","title":"\ud83d\udd27 Targeted Reactivity","text":"<p>FletX gives you fine-grained reactivity, letting you update just a button, a field, or a panel \u2014 without refreshing the entire page. This results in better performance and user experience.</p>"},{"location":"getting-started/state-management/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Explore Controllers</li> <li>Learn about the Architecture</li> <li>Dive into dependency injection</li> </ul>"}]}